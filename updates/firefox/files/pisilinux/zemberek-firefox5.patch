Index: extensions/spellcheck/hunspell/src/mozHunspell.h
===================================================================
--- extensions/spellcheck/hunspell/src/mozHunspell.h.orig
+++ extensions/spellcheck/hunspell/src/mozHunspell.h
@@ -71,7 +71,7 @@
 #include "nsWeakReference.h"
 #include "nsCycleCollectionParticipant.h"
 
-#define MOZ_HUNSPELL_CONTRACTID "@mozilla.org/spellchecker/engine;1"
+#define MOZ_HUNSPELL_CONTRACTID "@mozilla.org/spellchecker/hunspell;1"
 #define MOZ_HUNSPELL_CID         \
 /* 56c778e4-1bee-45f3-a689-886692a97fe7 */   \
 { 0x56c778e4, 0x1bee, 0x45f3, \
Index: extensions/spellcheck/Makefile.in
===================================================================
--- extensions/spellcheck/Makefile.in.orig
+++ extensions/spellcheck/Makefile.in
@@ -47,7 +47,7 @@ DIRS		= idl locales
 ifeq (camino,$(MOZ_BUILD_APP))
 DIRS		+= osxspell
 else
-DIRS		+= hunspell
+DIRS		+= hunspell zemberek
 endif
 
 DIRS += src
Index: extensions/spellcheck/src/Makefile.in
===================================================================
--- extensions/spellcheck/src/Makefile.in.orig
+++ extensions/spellcheck/src/Makefile.in
@@ -70,11 +70,16 @@ SHARED_LIBRARY_LIBS += ../hunspell/src/$
 LOCAL_INCLUDES += -I$(srcdir)/../hunspell/src
 endif
 
+SHARED_LIBRARY_LIBS += ../zemberek/src/$(LIB_PREFIX)zemberek_s.$(LIB_SUFFIX)
+LOCAL_INCLUDES += -I$(srcdir)/../zemberek/src
+
 EXTRA_DSO_LDOPTS = \
 		$(LIBS_DIR) \
 		$(MOZ_COMPONENT_LIBS) \
+		$(MOZ_DBUS_GLIB_LIBS) \
 		$(MOZ_UNICHARUTIL_LIBS) \
 		$(MOZ_HUNSPELL_LIBS) \
+		$(MOZ_ZEMBEREK_LIBS) \
 		$(NULL)
 
 include $(topsrcdir)/config/rules.mk
@@ -82,3 +87,6 @@ include $(topsrcdir)/config/rules.mk
 LOCAL_INCLUDES += \
 	-I$(topsrcdir)/xpcom/io \
 	$(NULL)
+
+CXXFLAGS += $(TK_CFLAGS) $(MOZ_DBUS_GLIB_CFLAGS)
+CXXFLAGS := $(subst -pedantic,,$(CXXFLAGS))
Index: extensions/spellcheck/src/mozSpellChecker.cpp
===================================================================
--- extensions/spellcheck/src/mozSpellChecker.cpp.orig
+++ extensions/spellcheck/src/mozSpellChecker.cpp
@@ -43,7 +43,7 @@
 
 #define UNREASONABLE_WORD_LENGTH 64
 
-#define DEFAULT_SPELL_CHECKER "@mozilla.org/spellchecker/engine;1"
+#define DEFAULT_SPELL_CHECKER "@mozilla.org/spellchecker/hunspell;1"
 
 NS_IMPL_CYCLE_COLLECTING_ADDREF(mozSpellChecker)
 NS_IMPL_CYCLE_COLLECTING_RELEASE(mozSpellChecker)
@@ -367,13 +367,20 @@ mozSpellChecker::SetCurrentDictionary(co
   nsresult rv;
   nsCString *contractId;
 
-  if (!mDictionariesMap.Get(aDictionary, &contractId)){
+  if (!mDictionariesMap.Get(aDictionary, &contractId)) {
     NS_WARNING("Dictionary not found");
     return NS_ERROR_NOT_AVAILABLE;
   }
 
   if (!mCurrentEngineContractId || !mCurrentEngineContractId->Equals(*contractId)){
-    mSpellCheckingEngine = do_GetService(contractId->get(), &rv);
+
+    if (aDictionary.Equals(NS_LITERAL_STRING("tr-TR").get()))
+      mSpellCheckingEngine = do_GetService("@mozilla.org/spellchecker/zemberek;1",&rv);
+    else
+      mSpellCheckingEngine = do_GetService("@mozilla.org/spellchecker/hunspell;1", &rv);
+
+    mSpellCheckingEngine->SetPersonalDictionary(mPersonalDictionary);
+
     if (NS_FAILED(rv))
       return rv;
 
@@ -551,7 +558,11 @@ mozSpellChecker::InitSpellCheckDictionar
       if (mDictionariesMap.Get(dictName, NULL))
         continue;
 
-      mDictionariesMap.Put(dictName, new nsCString(contractId));
+      if (dictName.Equals(NS_LITERAL_STRING("tr-TR").get()))
+        mDictionariesMap.Put(dictName, new nsCString("@mozilla.org/spellchecker/zemberek;1"));
+      else
+        mDictionariesMap.Put(dictName, new nsCString(contractId));
+
     }
 
     NS_FREE_XPCOM_ALLOCATED_POINTER_ARRAY(count, words);
Index: extensions/spellcheck/src/mozSpellCheckerFactory.cpp
===================================================================
--- extensions/spellcheck/src/mozSpellCheckerFactory.cpp.orig
+++ extensions/spellcheck/src/mozSpellCheckerFactory.cpp
@@ -41,7 +41,9 @@
 #include "mozOSXSpell.h"
 #else
 #include "mozHunspell.h"
+#include "mozZemberek.h"
 #include "mozHunspellDirProvider.h"
+#include "mozZemberekDirProvider.h"
 #endif
 
 #include "mozSpellChecker.h"
@@ -64,7 +66,9 @@
 NS_GENERIC_FACTORY_CONSTRUCTOR(mozOSXSpell)
 #else
 NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(mozHunspell, Init)
+NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(mozZemberek, Init)
 NS_GENERIC_FACTORY_CONSTRUCTOR(mozHunspellDirProvider)
+NS_GENERIC_FACTORY_CONSTRUCTOR(mozZemberekDirProvider)
 #endif
 
 NS_GENERIC_FACTORY_CONSTRUCTOR_INIT(mozSpellChecker, Init)
@@ -108,7 +112,9 @@ mozInlineSpellCheckerConstructor(nsISupp
 NS_DEFINE_NAMED_CID(MOZ_OSXSPELL_CID);
 #else
 NS_DEFINE_NAMED_CID(MOZ_HUNSPELL_CID);
+NS_DEFINE_NAMED_CID(MOZ_ZEMBEREK_CID);
 NS_DEFINE_NAMED_CID(HUNSPELLDIRPROVIDER_CID);
+NS_DEFINE_NAMED_CID(ZEMBEREKDIRPROVIDER_CID);
 #endif // MOZ_MACBROWSER
 NS_DEFINE_NAMED_CID(NS_SPELLCHECKER_CID);
 NS_DEFINE_NAMED_CID(MOZ_PERSONALDICTIONARY_CID);
@@ -121,6 +127,8 @@ static const mozilla::Module::CIDEntry k
 #else
     { &kMOZ_HUNSPELL_CID, false, NULL, mozHunspellConstructor },
     { &kHUNSPELLDIRPROVIDER_CID, false, NULL, mozHunspellDirProviderConstructor },
+    { &kMOZ_ZEMBEREK_CID, false, NULL, mozZemberekConstructor },
+    { &kZEMBEREKDIRPROVIDER_CID, false, NULL, mozZemberekDirProviderConstructor },
 #endif // MOZ_MACBROWSER
     { &kNS_SPELLCHECKER_CID, false, NULL, mozSpellCheckerConstructor },
     { &kMOZ_PERSONALDICTIONARY_CID, false, NULL, mozPersonalDictionaryConstructor },
@@ -135,6 +143,8 @@ static const mozilla::Module::ContractID
 #else
     { MOZ_HUNSPELL_CONTRACTID, &kMOZ_HUNSPELL_CID },
     { mozHunspellDirProvider::kContractID, &kHUNSPELLDIRPROVIDER_CID },
+    { MOZ_ZEMBEREK_CONTRACTID, &kMOZ_ZEMBEREK_CID },
+    { mozZemberekDirProvider::kContractID, &kZEMBEREKDIRPROVIDER_CID },
 #endif // MOZ_MACBROWSER
     { NS_SPELLCHECKER_CONTRACTID, &kNS_SPELLCHECKER_CID },
     { MOZ_PERSONALDICTIONARY_CONTRACTID, &kMOZ_PERSONALDICTIONARY_CID },
@@ -146,6 +156,7 @@ static const mozilla::Module::ContractID
 static const mozilla::Module::CategoryEntry kSpellcheckCategories[] = {
 #ifndef MOZ_MACBROWSER
     { XPCOM_DIRECTORY_PROVIDER_CATEGORY, "spellcheck-directory-provider", mozHunspellDirProvider::kContractID },
+    { XPCOM_DIRECTORY_PROVIDER_CATEGORY, "spellcheck-directory-provider", mozZemberekDirProvider::kContractID },
 #endif
     { NULL }
 };
